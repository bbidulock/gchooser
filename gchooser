#!/usr/bin/perl

use Getopt::Long;
use Socket qw( SOCK_DGRAM SOCK_STREAM SOL_SOCKET SO_BROADCAST AF_INET AF_INET6 AF_UNIX
	IPPROTO_UDP MSG_DONTWAIT PF_INET PF_INET6 sockaddr_family pack_sockaddr_in
	unpack_sockaddr_in pack_sockaddr_in6 unpack_sockaddr_in6 pack_sockaddr_un
	unpack_sockaddr_un getnameinfo getaddrinfo inet_ntop inet_pton);
use Net::Interface qw(type :iftype);
use Net::IP;
use Glib qw(TRUE FALSE);
use Gtk2 -init;
use strict;
use warnings;

my $HOSTNAME = $ENV{HOSTNAME};
unless ($HOSTNAME) {
	$HOSTNAME = `hostname`;
	chomp $HOSTNAME;
}

my %options = (
	connectionType=>0,
	banner=>"/usr/lib/X11/xdm/banner.png",
	welcome=>"<span font=\"Liberation Sans 14\"><b><i>Welcome to $HOSTNAME!</i></b></span>",
	);

sub pack_option {
	$options{$_[0]} = pack('H*',$_[1]);
}

my $syntax = GetOptions(
	"xdmAddress=s"=>\&pack_option,
	"clientAddress=s"=>\&pack_option,
	"connectionType=i"=>\$options{connectionType},
	"banner=s"=>\$options{banner},
	"welcome=s"=>\$options{welcome},
);

# Packet format:
#
# CARD16 version number (always 1)
# CARD16 opcode
# CARD16 length of remaining data in bytes
#
# Query, BroadcastQuery, IndirectQuery
# Display -> Manager
# Fields:
#	Authentication names: ARRAYofARRAY8

# Willing
# Manager -> Display
#	Authentication name: ARRAY8
#	Hostname: ARRAY8
#	Status: ARRAY8
#

# Unwilling
# Manager -> Display
#	Hostname: ARRAY8
#	Status: ARRAY8
#

use constant {
	BROADCAST_QUERY	=> 1,
	QUERY		=> 2,
	INDIRECT_QUERY	=> 3,
	FORWARD_QUERY	=> 4,
	WILLING		=> 5,
	UNWILLING	=> 6,
	REQUEST		=> 7,
	ACCEPT		=> 8,
	DECLINE		=> 9,
	MANAGE		=> 10,
	REFUSE		=> 11,
	FAILED		=> 12,
	KEEPALIVE	=> 13,
	ALIVE		=> 14,
};

use constant {
	XDM_QUERY			=> 0,
	XDM_BROADCAST			=> 1,
	XDM_INDIRECT			=> 2,
	XDM_COLLECT_QUERY		=> 3,
	XDM_COLLECT_BROADCAST_QUERY	=> 4,
	XDM_COLLECT_INDIRECT_QUERY	=> 5,
	XDM_START_CONNECTION		=> 6,
	XDM_AWAIT_REQUEST_RESPONSE	=> 7,
	XDM_MANAGE			=> 8,
	XDM_RUN_SESSION			=> 9,
	XDM_OFF				=> 10,
	XDM_AWAIT_USER_INPUT		=> 11,
	XDM_KEEPALIVE			=> 12,
	XDM_AWAIT_ALIVE_RESPONSE	=> 13,
	XDM_MULTICAST			=> 14,
	XDM_COLLECT_MULTICAST_QUERY	=> 15,
};

use constant {
	XDM_UDP_PORT			=> 177,
	XDMCP_PROTOCOL_VERSION		=> 1,
};

use constant {
	PING_TRIES	=> 3,
	PING_INTERVAL	=> 2000,    # 2 seconds
};

use constant {
	OBEYSESS_DISPLAY	=> 0,	# obey multipleSessions resources
	REMANAGE_DISPLAY	=> 1,	# force remanage
	UNMANAGE_DISPLAY	=> 2,	# force deletion
	RESERVER_DISPLAY	=> 3,	# force server termination
	OPENFAILED_DISPLAY	=> 4,	# XOpenDisplay failed, retry
};

use constant {
	FamilyInternet		=> 0,	    # X.h: IPv4
	FamilyDECnet		=> 1,	    # X.h:
	FamilyChaos		=> 2,	    # X.h:
	FamilyInternet6		=> 6,	    # X.h: IPv6

	FamilyLocal		=> 256,	    # Xauth.h: not part of X standard
	FamilyWild		=> 65535,   # Xauth.h:
	FamilyNetname		=> 254,	    # Xauth.h: not part of X standard
	FamilyKrb5Principal	=> 253,	    # Xauth.h: Kerberos 5 principal name
	FamilyLocalHost		=> 252,	    # Xauth.h: for local non-net authentication
};

use constant {
	COLUMN_HOSTNAME	    => 0,
	COLUMN_REMOTENAME   => 1,
	COLUMN_WILLING	    => 2,
	COLUMN_STATUS	    => 3,
	COLUMN_IPADDR	    => 4,
	COLUMN_CTYPE	    => 5,
	COLUMN_SERVICE	    => 6,
	COLUMN_PORT	    => 7,
	COLUMN_MARKUP	    => 8,
	COLUMN_TOOLTIP	    => 9,
	MODEL_FIELDS	    => [
		'Glib::String', # hostname
		'Glib::String', # remotename
		'Glib::Int',    # willing
		'Glib::String', # status
		'Glib::String', # IP Address
		'Glib::Int',    # connection type
		'Glib::String', # service
		'Glib::Int',    # port
		'Glib::String', # markup
		'Glib::String', # tooltip
	],
};

my $top;
my $model;
my $view;

sub AddHost {
	my ($addr,$opc,$authname,$hostname,$status) = @_;
	return unless $model;
	my ($ctype);
	my $hostent;
	my ($port,$rawaddr,$ipaddr);
	my $family = sockaddr_family($addr);
	if ($family == AF_INET) {
		$ctype = &FamilyInternet;
		($port,$rawaddr) = unpack_sockaddr_in($addr);
		$ipaddr = inet_ntop(AF_INET,$rawaddr);
	}
	elsif ($family == AF_INET6) {
		$ctype = &FamilyInternet6;
		($port,$rawaddr) = unpack_sockaddr_in6($addr);
		$ipaddr = inet_ntop(AF_INET6,$rawaddr);
	}
	elsif ($family == AF_UNIX) {
		$ctype = &FamilyLocal;
		($port,$ipaddr,$rawaddr) = (0,'','');
	}
	else {
		return;
	}
	return unless $options{connectionType} == $ctype;
	my ($err, $remotename, $service) = getnameinfo($addr);
	return if $err;
	my $iter;
	my $found = 0;
	my @values;
	for ($iter = $model->iter_nth_child(undef,0); $iter; $iter = $model->iter_next($iter)) {
		@values = $model->get($iter);
		next unless $values[&COLUMN_IPADDR] eq $ipaddr and
			    $values[&COLUMN_HOSTNAME] eq $hostname;
		$found = 1;
		print STDERR "Found host $hostname.\n";
		last;
	}
	if (not $found) {
		@values = ();
		$iter = $model->append;
	}
	$values[&COLUMN_IPADDR]	    = $ipaddr;
	$values[&COLUMN_HOSTNAME]   = $hostname;
	$values[&COLUMN_REMOTENAME] = $remotename;
	$values[&COLUMN_WILLING]    = $opc;
	$values[&COLUMN_STATUS]	    = $status;
	$values[&COLUMN_CTYPE]	    = $ctype;
	$values[&COLUMN_SERVICE]    = $service;
	$values[&COLUMN_PORT]	    = $port;
	$model->set($iter,
		&COLUMN_HOSTNAME,   $values[&COLUMN_HOSTNAME],
		&COLUMN_REMOTENAME, $values[&COLUMN_REMOTENAME],
		&COLUMN_WILLING,    $values[&COLUMN_WILLING],
		&COLUMN_STATUS,	    $values[&COLUMN_STATUS],
		&COLUMN_IPADDR,	    $values[&COLUMN_IPADDR],
		&COLUMN_CTYPE,	    $values[&COLUMN_CTYPE],
		&COLUMN_SERVICE,    $values[&COLUMN_SERVICE],
		&COLUMN_PORT,	    $values[&COLUMN_PORT],
	);
	my @markup;
	my @tooltip;
	my $conntype = {
		&FamilyLocal=>"UNIX Domain",
		&FamilyInternet=>"TCP (IP Version 4)",
		&FamilyInternet6=>"TCP (IP Version 6)",
	}->{$ctype};
	push @tooltip, "<small><b>Hostname:</b>\t$hostname</small>";
	push @tooltip, "<small><b>Alias:</b>\t\t$remotename</small>";
	if ($opc == &WILLING) {
		push @markup, "<span foreground=\"black\"><b>$hostname</b></span>";
		push @markup, "<small><span foreground=\"black\">($remotename)</span></small>";
		push @markup, "<small><span foreground=\"black\"><i>$status</i></span></small>";
		push @tooltip, "<small><b>Willing:</b>\t\tWilling($opc)</small>";
		push @tooltip, "<small><b>Status:</b>\t\t$status</small>";
	}
	else {
		push @markup, "<span foreground=\"grey\"><b>$hostname</b></span>";
		push @markup, "<small><span foreground=\"grey\">($remotename)</span></small>";
		push @markup, "<small><span foreground=\"grey\"><i>Unwilling($opc)</i></span></small>";
		push @tooltip, "<small><b>Willing:</b>\tUnwilling</small>";
	}
	push @tooltip, "<small><b>IP Address:</b>\t$ipaddr</small>";
	push @tooltip, "<small><b>ConnType:</b>\t$conntype</small>";
	push @tooltip, "<small><b>Service:</b>\t\t$service</small>";
	push @tooltip, "<small><b>Port:</b>\t\t$port</small>";
	$model->set($iter,
		&COLUMN_MARKUP,	 join("\n",@markup),
		&COLUMN_TOOLTIP, join("\n",@tooltip),
	);
	return 1;
}

sub ReceivePacket {
	my ($sock,$ver) = @_;
	my $message = "";
	return unless defined $sock;
	my ($addr,$bytes);
	while (defined($addr = recv($sock,$message,4096,MSG_DONTWAIT))) {
		next unless length($message) >= 6;
		my ($ver,$opc,$len) = unpack('nnn',substr($message,0,6));
		my $off = 6;
		next unless $ver == 1;
		my ($authname,$hostname,$status) = ('');
		next unless $opc == &WILLING or $opc == &UNWILLING;
		if ($opc == &WILLING) {
			next unless length($message) >= $off + 2;
			$bytes = unpack('n',substr($message,$off,2)); $off += 2;
			next unless length($message) >= $off + $bytes;
			$authname = substr($message,$off,$bytes); $off += $bytes;
		}
		next unless length($message) >= $off + 2;
		$bytes = unpack('n',substr($message,$off,2)); $off += 2;
		next unless length($message) >= $off + $bytes;
		$hostname = substr($message,$off,$bytes); $off += $bytes;
		next unless length($message) >= $off + 2;
		$bytes = unpack('n',substr($message,$off,2)); $off += 2;
		next unless length($message) >= $off + $bytes;
		$status = substr($message,$off,$bytes); $off += $bytes;
		AddHost($addr,$opc,$authname,$hostname,$status);
	}
	return Glib::SOURCE_CONTINUE;
}

my @hostaddrs;
my $pingTry = 0;

sub PingHosts {
	print STDERR "PingHosts...\n";
	foreach my $hostaddr (@hostaddrs) {
		my $sock = $hostaddr->{sock};
		next unless $sock;
		my $addr = $hostaddr->{addr};
		my $family = sockaddr_family($addr);
		if ($family == AF_INET) {
			my @parts = unpack_sockaddr_in($addr);
			$parts[1] = inet_ntop(AF_INET,$parts[1]);
			print STDERR "Pinging: ",join(',',@parts),"\n";
		}
		elsif ($family == AF_INET6) {
			my @parts = unpack_sockaddr_in6($addr);
			$parts[1] = inet_ntop(AF_INET6,$parts[1]);
			print STDERR "Pinging: ",join(',',@parts),"\n";
		}
		elsif ($family == AF_UNIX) {
			my @parts = unpack_sockaddr_un($addr);
			print STDERR "Pinging: ",join(',',@parts),"\n";
		}
		send($sock,pack('nnnb',&XDMCP_PROTOCOL_VERSION,$hostaddr->{opco},1,0),0,$addr) or
			warn "send: $!";
	}
	$pingTry = $pingTry + 1;
	if ($pingTry < PING_TRIES) {
		Glib::Timeout->add(PING_INTERVAL,\&PingHosts);
	}
	return Glib::SOURCE_REMOVE;
}

sub InitXDMCP {
	print STDERR "InitXDMCP...\n";
	socket(my $sock4, PF_INET, SOCK_DGRAM, 0) or return 0;
	setsockopt($sock4, SOL_SOCKET, SO_BROADCAST, pack('l',1)) or warn "setsockopt: $!";
	socket(my $sock6, PF_INET6, SOCK_DGRAM, 0) || warn "socket: $!";
	setsockopt($sock6, SOL_SOCKET, SO_BROADCAST, pack('l',1)) or warn "setsockopt: $!";

	my $tag4 = Glib::IO->add_watch(fileno($sock4),'in',sub{
			ReceivePacket($sock4,4);
			return Glib::SOURCE_CONTINUE;
		});
	my $tag6 = Glib::IO->add_watch(fileno($sock6),'in',sub{
			ReceivePacket($sock6,6);
			return Glib::SOURCE_CONTINUE;
		}) if defined $sock6;

	my $clienttype = '';
	if ($options{clientAddress}) {
		if (length($options{clientAddress}) == 4) {
			my $ip = new Net::IP(inet_ntop(AF_INET,$options{clientAddress}));
			$clienttype = $ip->iptype;
		}
		elsif (length($options{clientAddress}) == 16) {
			my $ip = new Net::IP(inet_ntop(AF_INET6,$options{clientAddress}));
			$clienttype = $ip->iptype;
		}
	}

	 # ARGV can be:
	 #	special string 'BROADCAST'
	 #	hex coded IPv4 address XXXXXXXX
	 #	hostname or text-based IPv4 or IPv6 address
	 #
	 # When 'BROADCAST' or text-based address is an IPv6 multicast
	 # address, send a BROADCAST_QUERY.  Otherwise, send a QUERY.
	 # 'BROADCAST' should register each interface that is broadcast
	 # capable and is UP by its broadcast address.
	 #
	foreach (@ARGV) {
		if (/^BROADCAST$/) {
			my @interfaces = Net::Interface->interfaces();
			foreach my $if (@interfaces) {
				my @addrs = $if->broadcast();
				foreach my $addr (@addrs) {
					next unless defined $addr;
					my $sockaddr;
					if (length($addr) == 4) {
						$sockaddr = pack_sockaddr_in(XDM_UDP_PORT,$addr);
						push @hostaddrs, {
							addr=>$sockaddr,
							sock=>$sock4,
							opco=>&BROADCAST_QUERY,
						};
					} else {
						$sockaddr = pack_sockaddr_in6(XDM_UDP_PORT,$addr);
						push @hostaddrs, {
							addr=>$sockaddr,
							sock=>$sock6,
							opco=>&BROADCAST_QUERY,
						};
					}
				}
			}
		}
		elsif (/^([0-9a-fA-F][0-9a-fA-F]){4}$/) {
			my $addr = pack('H*',$_);
			my $sockaddr = pack_sockaddr_in(XDM_UDP_PORT,$addr);
			push @hostaddrs, {
				addr=>$sockaddr,
				sock=>$sock4,
				opco=>&QUERY,
			}
		}
		else {
			my ($err,@results) = getaddrinfo($_,'xdmcp',{
				socktype=>SOCK_DGRAM,
				protocol=>IPPROTO_UDP,
			});
			next if $err;
			foreach my $result (@results) {
				next unless $result->{family} == AF_INET or
					    $result->{family} == AF_INET6;
				next unless $result->{socktype} == SOCK_DGRAM;
				next unless $result->{protocol} == IPPROTO_UDP;
				if ($result->{family} == AF_INET) {
					my ($port,$addr) =
						unpack_sockaddr_in($result->{addr});
					my $ip = new Net::IP(inet_ntop(AF_INET,$addr));
					my $type = $ip->iptype;
					warn "Address ",inet_ntop(AF_INET,$addr)," invalid!" unless defined $type;
					if ($type =~ /MULTICAST/i) {
						push @hostaddrs, {
							addr=>$result->{addr},
							sock=>$sock4,
							opco=>&BROADCAST_QUERY,
						};
					}
					elsif ($type !~ /LOOPBACK/i or
					       $clienttype =~ /LOOPBACK/i) {
						push @hostaddrs, {
							addr=>$result->{addr},
							sock=>$sock4,
							opco=>&QUERY,
						};
					}
				}
				else {
					my ($port,$addr,$scope,$flow) =
						unpack_sockaddr_in6($result->{addr});
					my $ip = new Net::IP(inet_ntop(AF_INET6,$addr));
					my $type = $ip->iptype;
					if ($type =~ /MULTICAST/i) {
						push @hostaddrs, {
							addr=>$result->{addr},
							sock=>$sock6,
							opco=>&BROADCAST_QUERY,
						};
					}
					elsif ($type !~ /LOOPBACK/i or
					       $clienttype =~ /LOOPBACK/i) {
						push @hostaddrs, {
							addr=>$result->{addr},
							sock=>$sock6,
							opco=>&QUERY,
						};
					}
				}
			}
		}
	}
	$pingTry = 0;
	PingHosts();
	return 1;
}

sub ErrorMessage {
	my $markup = shift;
	my $text = $markup;
	$text =~ s/<[^>]*>//g;
	warn "$text";
	my $msg = Gtk2::MessageDialog->new_with_markup($top,
		'destroy-with-parent', 'error', 'ok', $markup);
	$msg->signal_connect(response=>sub{$msg->destroy});
	$msg->show_all;
	Glib::Timeout->add(3000,sub{$msg->destroy});
}

sub InfoMessage {
	my $markup = shift;
	my $text = $markup;
	$text =~ s/<[^>]*>//g;
	print STDERR "$text";
	my $msg = Gtk2::MessageDialog->new_with_markup($top,
		'destroy-with-parent', 'info', 'ok', $markup);
	$msg->signal_connect(response=>sub{$msg->destroy});
	$msg->show_all;
	Glib::Timeout->add(3000,sub{$msg->destroy});
}

sub Choose {
	my ($ctype,$ipaddr) = @_;
	my $host = shift;
	if ($options{xdmAddress}) {
		#
		# Connect to XDM and output result
		#
		my ($family,$port) = unpack('nn',substr($options{xdmAddress},0,4));
		my ($addr,$sockaddr,$rawaddr);
		if ($family == AF_INET) {
			$addr = substr($options{xdmAddress},4,4);
			$sockaddr = pack_sockaddr_in($port,$addr);
		}
		elsif ($family == AF_INET6) {
			$addr = substr($options{xdmAddress},4,16);
			$sockaddr = pack_sockaddr_in6($port,$addr);
		}
		else {
			ErrorMessage("<b>Bad address family!</b>\nNumber: $family\n");
			return;
		}
		if ($ctype == &FamilyInternet) {
			$rawaddr = inet_pton(AF_INET,$ipaddr);
		}
		elsif ($ctype == &FamilyInternet6) {
			$rawaddr = inet_pton(AF_INET6,$ipaddr);
		}
		else {
			ErrorMessage("<b>Bad connect type!<b>\nNumber $ctype\n");
			return;
		}
		my $sock;
		unless (socket($sock, $family, SOCK_STREAM, 0)) {
			ErrorMessage("<b>socket:</b> $!");
			return;
		}
		unless (connect($sock,$sockaddr)) {
			ErrorMessage("<b>connect:</b> $!");
			close($sock);
			return;
		}
		my $message = '';
		$message .= pack('n',length($options{clientAddress})).$options{clientAddress};
		$message .= pack('n',$options{connectionType});
		$message .= pack('n',length($rawaddr)).$rawaddr;
		unless (send($sock,$message,0,$sockaddr)) {
			ErrorMessage("<b>send:</b> $!");
			close($sock);
			return;
		}
		close($sock);
	}
	else {
		InfoMessage("Would have connected to $ipaddr\n");
	}
	exit(&OBEYSESS_DISPLAY);
}

sub DoAccept {
	return unless $view;
	my $selection = $view->get_selection;
	my ($model,$iter) = $selection->get_selected;
	unless ($iter) {
		ErrorMessage("<b>No selection!</b>\nClick on a list entry to make a selection.");
		return;
	}
	my ($ctype,$ipaddr,$willing) = $model->get($iter,&COLUMN_CTYPE,&COLUMN_IPADDR,&COLUMN_WILLING);
	unless ($willing == &WILLING) {
		ErrorMessage("<b>Host is not willing!</b>\n$willing != ".&WILLING."\n<b>Address:</b> $ipaddr\n<b>Conntype:</b> $ctype\nPlease select another host.");
		return;
	}
	unless ($ctype == $options{connectionType}) {
		ErrorMessage("<b>Host has wrong connection type!</b>\nPlease select another host.");
		return;
	}
	Choose($ctype,$ipaddr);
}

sub DoCancel {
	exit(&OBEYSESS_DISPLAY);
}

sub DoCheckWilling {
	my $host = shift;
	return ($host->{willing} == &WILLING);
}

sub DoPing {
	if ($pingTry == PING_TRIES) {
		$pingTry = 0;
		PingHosts;
	}
}

sub GetWindow {
	my $win = Gtk2::Window->new('toplevel');
	$win->set_wmclass('chooser','Chooser');
	$win->set_title('XDMCP Chooser');
	$win->set_gravity('center');
	$win->set_position('center');
	$win->set_default_size(800,600);
	$win->set_property("allow-grow",FALSE);
	$win->set_property("allow-shrink",FALSE);
	$win->set_resizable(FALSE);
	$win->set_decorated(FALSE);
	$win->set_skip_pager_hint(TRUE);
	$win->set_skip_taskbar_hint(TRUE);
	$win->signal_connect(destroy=>sub{DoCancel(); 1});
	$win->set_border_width(8);

	my $hostname = `hostname`; chomp $hostname;

	my $vbox = Gtk2::VBox->new;
	$win->add($vbox);
	{
		my $lab = Gtk2::Label->new;
		my @lines;
		push @lines, $options{welcome} if $options{welcome};
		$lab->set_markup(join("\n",@lines));
		$vbox->pack_start($lab,FALSE,TRUE,0);
	}
	{
		my $tab = Gtk2::Table->new(1,2,TRUE);
		$tab->set_col_spacings(5);
		$vbox->pack_end($tab,TRUE,TRUE,0);
		{
			my $bin = Gtk2::Frame->new;
			$bin->set_shadow_type('etched-in');
			$bin->set_border_width(0);
			$tab->attach_defaults($bin,0,1,0,1);

			my $pan = Gtk2::Frame->new;
			$pan->set_shadow_type('none');
			$pan->set_border_width(12);
			$bin->add($pan);

			my $img = Gtk2::Image->new_from_file($options{banner});
			$pan->add($img);
		}
		{
			my $vbox = Gtk2::VBox->new;
			$tab->attach_defaults($vbox,1,2,0,1);

			{
				my $sw = Gtk2::ScrolledWindow->new;
				$sw->set_shadow_type('etched-in');
				$sw->set_policy('never','automatic');
				$vbox->pack_start($sw,TRUE,TRUE,0);

				$model = Gtk2::ListStore->new(@{&MODEL_FIELDS});
				$view = Gtk2::TreeView->new($model);
				$view->set_rules_hint(TRUE);
				$view->set_search_column(&COLUMN_HOSTNAME);
				$view->set_tooltip_column(&COLUMN_TOOLTIP);
				$sw->add($view);

				my $renderer = Gtk2::CellRendererText->new;
				my $column = Gtk2::TreeViewColumn->new_with_attributes(
					"XDMCP Host Menu from $HOSTNAME",$renderer,markup=>&COLUMN_MARKUP);
				$column->set_sort_column_id(&COLUMN_MARKUP);
				$view->append_column($column);
				$view->signal_connect(row_activated=>sub{DoAccept(); Gtk2::EVENT_PROPAGATE});

				$sw->set_size_request(-1,300);
			}
			{
				my $bbox = Gtk2::HButtonBox->new;
				$bbox->set_layout_default('spread');
				$bbox->set_spacing_default(5);
				$vbox->pack_end($bbox,FALSE,TRUE,0);

				for (
					[qw(gtk-refresh Refresh),sub{DoPing(); Gtk2::EVENT_PROPAGATE}],
					[qw(gtk-cancel Cancel),sub{DoCancel(); Gtk2::EVENT_PROPAGATE}],
					[qw(gtk-connect Connect),sub{DoAccept(); Gtk2::EVENT_PROPAGATE}],
				) {
					my $image = Gtk2::Image->new_from_icon_name($_->[0],'button');
					my $button = Gtk2::Button->new_with_label($_->[1]);
					$button->set_image($image);
					$button->signal_connect_swapped(clicked=>$_->[2],$win);
					$win->{buttons}{$_->[1]} = $button;
					$bbox->add($button);
				}
			}
		}
	}
	$win->set_default_size(-1,350);
	$win->show_all;
	return $win
}

$top = GetWindow;

InitXDMCP;

Gtk2->main;

exit(&REMANAGE_DISPLAY);

1;

__DATA__
